vcl 4.0;

include "/etc/varnish/accept-language.vcl";
import cookie;
import header;
<%
  def canonical_hostname(domain)
    return "console.#{domain}" if node.name == 'production-console'
    return "daemon.#{domain}" if node.name == 'production-daemon'
    return "#{node.name}.#{domain}" if ['hoc-levels'].include?(node.name)
    return domain if rack_env?(:production)

    # our HTTPS wildcard certificate only supports *.code.org
    # 'env', 'studio.code.org' over https must resolve to 'env-studio.code.org' for non-prod environments
    sep = domain.include?('.code.org') ? '-' : '.'

    # Handle some hard-coded exceptions
    {
      react: 'react',
      translate: 'crowdin',
      levelbuilder: 'levelbuilder-staging',
      'levelbuilder-dev' => 'levelbuilder-development',
    }.each do |subdomain, node_name|
      return "#{subdomain}#{sep}#{domain}" if node.name == node_name
    end

    "#{node.chef_environment}#{sep}#{domain}"
  end

  def rack_env?(env)
    env.to_s == node.chef_environment
  end
  
  def session_cookie
    append_env '_learn_session'
  end

  def deprecated_storage_cookie
    append_env 'storage'
  end

  def storage_id_cookie
    append_env 'storage_id'
  end

  def append_env(name)
    name += "_#{node.chef_environment}" unless rack_env?(:production)
    name
  end
%>

import directors;

<%
  BACKENDS = node['cdo-varnish']['backends'].to_hash
  BACKENDS.each_pair do |id, ip|
%>
backend pegasus_<%= id %> {
  .host = "<%= ip %>";
  .port = "<%= node['cdo-apps']['pegasus']['port'] %>";
  .connect_timeout = 600s;
  .first_byte_timeout = 600s;
  .between_bytes_timeout = 600s;
}

backend dashboard_<%= id %> {
  .host = "<%= ip %>";
  .port = "<%= node['cdo-apps']['dashboard']['port'] %>";
  .connect_timeout = 600s;
  .first_byte_timeout = 600s;
  .between_bytes_timeout = 600s;
}
<%
  end
%>

# api.change.org
backend api_change_org_4 {
  .host = "104.16.4.13";
  .port = "80";
  .connect_timeout = 600s;
  .first_byte_timeout = 600s;
  .between_bytes_timeout = 600s;
}
backend api_change_org_5 {
  .host = "104.16.5.13";
  .port = "80";
  .connect_timeout = 600s;
  .first_byte_timeout = 600s;
  .between_bytes_timeout = 600s;
}

sub vcl_init {
  new default = directors.round_robin();
  new dashboard = directors.round_robin();
  new api_change_org = directors.round_robin();
<% BACKENDS.keys.each do |id| %>
  default.add_backend(pegasus_<%= id %>);
  dashboard.add_backend(dashboard_<%= id %>);
<% end %>
  api_change_org.add_backend(api_change_org_4);
  api_change_org.add_backend(api_change_org_5);
}

# Respond to incoming requests.
sub vcl_recv
{
  # Use "/varnishcheck" to determine if you are hitting a Varnish instance.
  if (req.method == "GET" && req.url ~ "^/varnishcheck$") {
    return(synth(200, "Varnish is ready."));
  }

  # Use "/health_check.php" to keep this instance in the load balancer.
  if (req.method == "GET" && req.url ~ "^/health_check.php$") {
    return(synth(200, "Varnish is healthy."));
  }

### REDIRECTS

  if(req.http.host ~ "\.$")
  {
    /* Don't allow domain names that end in "." */
    return(synth(751, "http://" + regsub(req.http.host, "\.$","") + req.url));
  }
  else if(req.http.host ~ "^www\.")
  {
    /* Normalize domain names to the short (non www.) form. */
    return(synth(751, "http://" + regsub(req.http.host, "^www\.","") + req.url));
  }
  <%
    # Alias the following domains to one of our primary ones.
    redirects = {
      'forums.code.org'      => 'support.code.org',
      'aws.code.org'      => 'code.org',
      'blockly.com'       => 'studio.code.org',
      'learn.code.org'    => 'studio.code.org',

      'hourofcode.org'    => 'hourofcode.com',
      'hourofcode.co'     => 'hourofcode.com',
      'hourofcode.net'    => 'hourofcode.com',
      'hourofcode.co.uk'  => 'hourofcode.com',
      'hourofcode.org.uk' => 'hourofcode.com',
      'onehourofcode.com' => 'hourofcode.com',
      'onehourofcode.org' => 'hourofcode.com',
      'dayofcode.com'     => 'hourofcode.com',
      'dayofcode.org'     => 'hourofcode.com',
      'monthofcode.com'   => 'hourofcode.com',
      'weekofcode.org'    => 'hourofcode.com',
      'weekofcode.com'    => 'hourofcode.com',
      'yearofcode.co.uk'  => 'uk.code.org',
      'yearofcode.org.uk' => 'uk.code.org',

      'csedweek.com'        => 'csedweek.org',
      'csedweek.net'        => 'csedweek.org',
      'cseducationweek.com' => 'csedweek.org',
      'cseducationweek.org' => 'csedweek.org',
    }
    unless rack_env?(:production)
      # Redirect e.g. [env].studio.code.org to [env]-studio.code.org
      redirects.merge!(Hash[*%w(studio learn i18n al ar br italia ro eu uk za).map{|x|["#{node.chef_environment}.#{x}.code.org", "#{node.chef_environment}-#{x}.code.org"]}.flatten])
      redirects.merge!({ 'translate.studio.code.org' => 'translate-studio.code.org'}) if rack_env?(:staging)
      redirects.merge!({ 'staging.translate.hourofcode.com' => 'staging-translate.hourofcode.com'}) if rack_env?(:staging)
    end
    redirects.each_pair do |domain,site|
  %>else if(req.http.Host == "<%= domain %>")
  {
    /* <%= domain %> redirects to <%= site %> */
    return(synth(751, "https://<%= site %>" + req.url));
  }
  <% end%>
  # Redirect http to https
  if(req.http.X-Forwarded-Proto !~ "(?i)https") {
    return(synth(751, "https://" + req.http.host + req.url));
  }
###

  if(req.http.Cookie) {
    cookie.parse(req.http.Cookie);
  }

### Accept-Language HEADER

  C{
      vcl_rewrite_accept_language(ctx);
  }C

  /*
  ** Convert language cookie into X-Varnish-Accept-Language header
  */
<%
i = 0
node['cdo-apps']['i18n']['languages'].to_hash.keys.each do |language|
  js = (i += 1) != 1 ? '  else ' : '  '
  js.concat("if(req.http.Cookie ~ \"language_=#{language}\") {\n    set req.http.X-Varnish-Accept-Language = \"#{language}\";\n  }\n")
%><%= js %><%
end
%>
###

### PROXIES

  if (req.http.host == "<%= canonical_hostname('learn.code.org') %>" ||
      req.http.host == "<%= canonical_hostname('studio.code.org') %>" ||
      req.http.host == "code-dot-org.cartoonnetworkarabic.com")
  {
    # Proxy studio.code.org/v2/ to code.org/v2/
    if (req.url ~ "^/v2/")
    {
      set req.backend_hint = default.backend();
      set req.http.host = "<%= canonical_hostname('code.org') %>";
    }
    else
    {
      # Route to Dashboard for studio.code.org
      set req.backend_hint = dashboard.backend();
    }
  }
  else if (req.url ~ "^/dashboardapi/")
  {
    # Proxy code.org/dashboardapi/ to studio.code.org/api/
    set req.backend_hint = dashboard.backend();
    set req.http.host = "<%= canonical_hostname('studio.code.org') %>";
    set req.url = regsub(req.url, "^/dashboardapi/", "/api/");
    return(pass);
  }
  else if (req.url ~ "^/api/change.org/")
  {
    # Proxy code.org/api/change.org/ to api.change.org/
    set req.backend_hint = api_change_org.backend();
    set req.http.host = "api.change.org";
    set req.url = regsub(req.url, "^/api/change.org/", "/");
    return(pass);
  }
  else
  {
    # Route to Pegasus by default
    set req.backend_hint = default.backend();
  }
###

### REQUEST COOKIE FILTER

  # Always cache the following file types for all users.
  if( (req.url ~ "(?i)\.(cur|pdf|png|gif|jpeg|jpg|ico|mp3|swf|css|js)(\?[a-z0-9]+)?$") && (!(req.url ~ "^/api/")) ) {
    unset req.http.Cookie;
  }

  # Remove all cookies that our sites don't need to know about. ANY remaining
  # cookie will cause the request to pass-through to a backend. For the most part
  # we always set the NO_CACHE cookie after any POST request, disabling the
  # Varnish cache temporarily. The session cookie allows all authenticated users
  # to pass through as long as they're logged in.
  if (req.http.Cookie) {
    if (
        req.http.host == "<%= canonical_hostname('learn.code.org') %>" ||
        req.http.host == "<%= canonical_hostname('studio.code.org') %>" ||
        req.url ~ "^/dashboardapi/" ||
        req.url ~ "^/v2/" ||
        req.url ~ "^/v3/" ||
        req.url ~ "^/api/" ||
        req.url ~ "^/private" ||
# Todo: Collapse these paths into /private to simplify Pegasus caching config
        req.url ~ "^/create-company-profile" ||
        req.url ~ "^/edit-company-profile" ||
        req.url ~ "^/teacher-dashboard" ||
        req.url ~ "^/manage-professional-development-workshops" ||
        req.url ~ "^/professional-development-workshop-surveys/" ||
        req.url ~ "^/ops-dashboard" ||
        req.url ~ "^/poste"
      ) {
      cookie.filter_except("<%=[session_cookie,deprecated_storage_cookie,storage_id_cookie].join(',')%>,language_,hour_of_code,NO_CACHE");
    } else {
      cookie.filter_except("NO_CACHE");
    }
    set req.http.Cookie = cookie.get_string();
    if (req.http.Cookie == "") {
      # If there are no remaining cookies, remove the cookie header. If there
      # aren't any cookie headers, Varnish's default behavior will be to cache
      # the page.
      unset req.http.Cookie;
    }
  }
###

  # Pass-through to builtin.
}

# Handle the HTTP request coming from our backend
# beresp == Back-end response from the web server.
sub vcl_backend_response {

### RESPONSE COOKIE FILTER
  if (
    bereq.url ~ "^/api/hour/begin/" ||
    bereq.url ~ "^/api/hour/begin_"
  ) {
    # allow this route to always set cookies.
  } else if (bereq.url ~ "(?i)\.(png|gif|jpeg|jpg|ico|swf|css|js)(\?[a-z0-9]+)?$") {
    # Don't allow static files to set cookies.
    unset beresp.http.set-cookie;
  }
###

  if (beresp.http.Cache-Control) {
    # Cache-Control: max-age directive overrides the Expires header.
    # This line is not strictly necessary, but appropriate for a default http-cache config.
    unset beresp.http.Expires;
  }

  # Keep all objects for 1h longer in the cache than their TTL specifies.
  # So even if HTTP objects are expired (they've passed their TTL), we can still use them in case all backends go down.
  # Old content to show is better than no content at all (or an error page).
  # Ref: https://www.varnish-cache.org/docs/4.0/users-guide/vcl-grace.html
  set beresp.grace = 1h;

  # Pass-through to builtin.
}

sub vcl_deliver {
  # Set a header to track a cache HIT/MISS.
  if (obj.hits > 0) {
    set resp.http.X-Varnish-Cache = "HIT";
  }
  else {
    set resp.http.X-Varnish-Cache = "MISS";
  }

  set resp.http.X-Varnish-Node = "<%= node.name %>";

  # Pass-through to builtin.
}

# Handle redirects
sub vcl_synth {
  if(resp.status == 750) {
    set resp.http.Location = resp.reason;
    set resp.status = 302;
    return(deliver);
  }

  if(resp.status == 751) {
    set resp.http.Location = resp.reason;
    set resp.status = 301;
    return(deliver);
  }
}
