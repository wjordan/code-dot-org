include "/etc/varnish/accept-language.vcl";
import cookie;
import header;
<%
  def canonical_hostname(domain)
    return "console.#{domain}" if node.name == 'production-console'
    return "daemon.#{domain}" if node.name == 'production-daemon'
    return "#{node.name}.#{domain}" if ['hoc-levels'].include?(node.name)
    return domain if rack_env?(:production)

    # our HTTPS wildcard certificate only supports *.code.org
    # 'env', 'studio.code.org' over https must resolve to 'env-studio.code.org' for non-prod environments
    sep = domain.include?('.code.org') ? '-' : '.'

    # Handle some hard-coded exceptions
    {
      react: 'react',
      translate: 'crowdin',
      levelbuilder: 'levelbuilder-staging',
      'levelbuilder-dev' => 'levelbuilder-development',
    }.each do |subdomain, node_name|
      return "#{subdomain}#{sep}#{domain}" if node.name == node_name
    end

    "#{node.chef_environment}#{sep}#{domain}"
  end

  def rack_env?(env)
    env.to_s == node.chef_environment
  end
  
  def session_cookie
    append_env '_learn_session'
  end

  def deprecated_storage_cookie
    append_env 'storage'
  end

  def storage_id_cookie
    append_env 'storage_id'
  end

  def append_env(name)
    name += "_#{node.chef_environment}" unless rack_env?(:production)
    name
  end
%>

<%
  BACKENDS = node['cdo-varnish']['backends'].to_hash
  BACKENDS.each_pair do |id, ip|
%>
backend pegasus_<%= id %> {
  .host = "<%= ip %>";
  .port = "<%= node['cdo-apps']['pegasus']['port'] %>";
  .connect_timeout = 600s;
  .first_byte_timeout = 600s;
  .between_bytes_timeout = 600s;
}

backend dashboard_<%= id %> {
  .host = "<%= ip %>";
  .port = "<%= node['cdo-apps']['dashboard']['port'] %>";
  .connect_timeout = 600s;
  .first_byte_timeout = 600s;
  .between_bytes_timeout = 600s;
}
<%
  end
%>

director default round-robin {
<% BACKENDS.keys.each do |id| %>
{
  .backend = pegasus_<%= id %>;
}
<% end %>
}

director dashboard round-robin {
<% BACKENDS.keys.each do |id| %>
{
  .backend = dashboard_<%= id %>;
}
<% end %>
}

# api.change.org
backend api_change_org_4 {
  .host = "104.16.4.13";
  .port = "80";
  .connect_timeout = 600s;
  .first_byte_timeout = 600s;
  .between_bytes_timeout = 600s;
}
backend api_change_org_5 {
  .host = "104.16.5.13";
  .port = "80";
  .connect_timeout = 600s;
  .first_byte_timeout = 600s;
  .between_bytes_timeout = 600s;
}
director api_change_org round-robin {
  { .backend = api_change_org_4; }
  { .backend = api_change_org_5; }
}

# Respond to incoming requests.
sub vcl_recv
{
  # Use "/varnishcheck" to determine if you are hitting a Varnish instance.
  if (req.request == "GET" && req.url ~ "^/varnishcheck$") {
    error 200 "Varnish is ready.";
  }

  # Use "/health_check.php" to keep this instance in the load balancer.
  if (req.request == "GET" && req.url ~ "^/health_check.php$") {
    error 200 "Varnish is healthy.";
  }

  if(req.http.host ~ "\.$")
  {
    /* Don't allow domain names that end in "." */
    error 751 "http://" + regsub(req.http.host, "\.$","") + req.url;
  }
  else if(req.http.host ~ "^www\.")
  {
    /* Normalize domain names to the short (non www.) form. */
    error 751 "http://" + regsub(req.http.host, "^www\.","") + req.url;
  }
  <%
    # Alias the following domains to one of our primary ones.
    redirects = {
      'forums.code.org'      => 'support.code.org',
      'aws.code.org'      => 'code.org',
      'blockly.com'       => 'studio.code.org',
      'learn.code.org'    => 'studio.code.org',

      'hourofcode.org'    => 'hourofcode.com',
      'hourofcode.co'     => 'hourofcode.com',
      'hourofcode.net'    => 'hourofcode.com',
      'hourofcode.co.uk'  => 'hourofcode.com',
      'hourofcode.org.uk' => 'hourofcode.com',
      'onehourofcode.com' => 'hourofcode.com',
      'onehourofcode.org' => 'hourofcode.com',
      'dayofcode.com'     => 'hourofcode.com',
      'dayofcode.org'     => 'hourofcode.com',
      'monthofcode.com'   => 'hourofcode.com',
      'weekofcode.org'    => 'hourofcode.com',
      'weekofcode.com'    => 'hourofcode.com',
      'yearofcode.co.uk'  => 'uk.code.org',
      'yearofcode.org.uk' => 'uk.code.org',

      'csedweek.com'        => 'csedweek.org',
      'csedweek.net'        => 'csedweek.org',
      'cseducationweek.com' => 'csedweek.org',
      'cseducationweek.org' => 'csedweek.org',
    }
    unless rack_env?(:production)
      # Redirect e.g. [env].studio.code.org to [env]-studio.code.org
      redirects.merge!(Hash[*%w(studio learn i18n al ar br italia ro eu uk za).map{|x|["#{node.chef_environment}.#{x}.code.org", "#{node.chef_environment}-#{x}.code.org"]}.flatten])
      redirects.merge!({ 'translate.studio.code.org' => 'translate-studio.code.org'}) if rack_env?(:staging)
      redirects.merge!({ 'staging.translate.hourofcode.com' => 'staging-translate.hourofcode.com'}) if rack_env?(:staging)
    end
    redirects.each_pair do |domain,site|
  %>else if(req.http.Host == "<%= domain %>")
  {
    /* <%= domain %> redirects to <%= site %> */
    error 751 "http://<%= site %>" + req.url;
  }
  <% end%>
  if(req.http.Cookie) {
    cookie.parse(req.http.Cookie);
  }

  # Redirect http to https
  if(req.http.X-Forwarded-Proto !~ "(?i)https") {
    error 751 "https://" + req.http.host + req.url;
  }

  C{
      vcl_rewrite_accept_language(ctx);
  }C

  /*
  ** Convert language cookie into X-Varnish-Accept-Language header
  */
<%
i = 0
node['cdo-apps']['i18n']['languages'].to_hash.keys.each do |language|
  js = (i += 1) != 1 ? '  else ' : '  '
  js.concat("if(req.http.Cookie ~ \"language_=#{language}\") {\n    set req.http.X-Varnish-Accept-Language = \"#{language}\";\n  }\n")
%><%= js %><%
end
%>

  if (req.http.host == "<%= canonical_hostname('learn.code.org') %>" ||
      req.http.host == "<%= canonical_hostname('studio.code.org') %>" ||
      req.http.host == "code-dot-org.cartoonnetworkarabic.com")
  {
    if (req.url ~ "^/v2/")
    {
      set req.backend = default;
      set req.http.host = "<%= canonical_hostname('code.org') %>";
    }
    else
    {
      set req.backend = dashboard;
    }
  }
  else if (req.url ~ "^/dashboardapi/")
  {
    # Map /dashboardapi to studio.code.org/api
    set req.backend = dashboard;
    set req.http.host = "<%= canonical_hostname('studio.code.org') %>";
    set req.url = regsub(req.url, "^/dashboardapi/", "/api/");
    return(pass);
  }
  else if (req.url ~ "^/api/change.org/")
  {
    set req.backend = api_change_org;
    set req.http.host = "api.change.org";
    set req.url = regsub(req.url, "^/api/change.org/", "/");
    return(pass);
  }
  else
  {
    set req.backend = default;
  }

  # Allow the backend to serve up stale content if it is responding slowly.
  if (!req.backend.healthy) {
    # Use anonymous, cached pages if all backends are down.
    unset req.http.Cookie;
    if (req.http.X-Forwarded-Proto == "https") {
      set req.http.X-Forwarded-Proto = "http";
    }
    set req.grace = 30m;
  } else {
    set req.grace = 15s;
  }

  # Handle compression correctly. Different browsers send different
  # "Accept-Encoding" headers, even though they mostly all support the same
  # compression mechanisms. By consolidating these compression headers into
  # a consistent format, we can reduce the size of the cache and get more hits.=
  # @see: https://www.varnish-cache.org/trac/wiki/FAQ/Compression
  if (req.http.Accept-Encoding) {
    if (req.http.Accept-Encoding ~ "gzip") {
      # If the browser supports it, we'll use gzip.
      set req.http.Accept-Encoding = "gzip";
    }
    else if (req.http.Accept-Encoding ~ "deflate" && req.http.user-agent !~ "MSIE") {
      # Next, try deflate if it is supported.
      # (IE doesn't support deflate properly, so we don't want to send deflated content to IE.)
      set req.http.Accept-Encoding = "deflate";
    }
    else {
      # Unknown algorithm. Remove it and send unencoded.
      remove req.http.Accept-Encoding;
    }
  }

  # Always cache the following file types for all users.
  if( (req.url ~ "(?i)\.(cur|pdf|png|gif|jpeg|jpg|ico|mp3|swf|css|js)(\?[a-z0-9]+)?$") && (!(req.url ~ "^/api/")) ) {
    unset req.http.Cookie;
  }

  # Remove all cookies that our sites don't need to know about. ANY remaining
  # cookie will cause the request to pass-through to a backend. For the most part
  # we always set the NO_CACHE cookie after any POST request, disabling the
  # Varnish cache temporarily. The session cookie allows all authenticated users
  # to pass through as long as they're logged in.
  if (req.http.Cookie) {
    if (req.url ~ "^/volunteers") {
      cookie.filter_except("_fe_session,hour_of_code,NO_CACHE");
    } else if (req.url ~ "^/auth") {
      cookie.filter_except("cdo-private,hour_of_code,NO_CACHE");
    } else if (
        req.http.host == "<%= canonical_hostname('learn.code.org') %>" ||
        req.http.host == "<%= canonical_hostname('studio.code.org') %>" ||
        req.url ~ "^/dashboardapi/" ||
        req.url ~ "^/v2/" ||
        req.url ~ "^/v3/" ||
        req.url ~ "^/api/" ||
        req.url == "/private" ||
        req.url ~ "^/private/" ||
        req.url ~ "^/create-company-profile" ||
        req.url ~ "^/edit-company-profile" ||
        req.url ~ "^/teacher-dashboard" ||
        req.url ~ "^/manage-professional-development-workshops" ||
        req.url ~ "^/professional-development-workshop-surveys/" ||
        req.url ~ "^/ops-dashboard" ||
        req.url ~ "^/poste"
      ) {
      cookie.filter_except("<%=[session_cookie,deprecated_storage_cookie,storage_id_cookie].join(',')%>,language_,hour_of_code,NO_CACHE");
    } else {
      cookie.filter_except("NO_CACHE");
    }
    set req.http.Cookie = cookie.get_string();
    if (req.http.Cookie == "") {
      # If there are no remaining cookies, remove the cookie header. If there
      # aren't any cookie headers, Varnish's default behavior will be to cache
      # the page.
      unset req.http.Cookie;
    }
    else {
      # If there are any cookies left (a session or NO_CACHE cookie), do not
      # cache the page. Pass it on to the backend directly.
      return (pass);
    }
  }

  ## From default below ##
  if (req.restarts == 0) {
    if (req.http.x-forwarded-for) {
      set req.http.X-Forwarded-For =
      req.http.X-Forwarded-For + ", " + client.ip;
    } else {
      set req.http.X-Forwarded-For = client.ip;
    }
  }
  if (req.request != "GET" &&
    req.request != "HEAD" &&
    req.request != "PUT" &&
    req.request != "POST" &&
    req.request != "TRACE" &&
    req.request != "OPTIONS" &&
    req.request != "DELETE") {
      /* Non-RFC2616 or CONNECT which is weird. */
      return (pipe);
  }
  if (req.request != "GET" && req.request != "HEAD") {
      /* We only deal with GET and HEAD by default */
      return (pass);
  }
  ## Unset Authorization header if it has the correct details...
  #if (req.http.Authorization == "Basic ") {
  #  unset req.http.Authorization;
  #}
  if (req.http.Authorization) {
      /* Not cacheable by default */
      return (pass);
  }
  return (lookup);
}

# Handle the HTTP request coming from our backend
# beresp == Back-end response from the web server.
sub vcl_fetch {

  if (
    req.url ~ "^/api/hour/begin/" ||
    req.url ~ "^/api/hour/begin_" ||
    req.url ~ "^/auth$" ||
    req.url ~ "^/auth/"
  ) {
    # allow this route to always set cookies.
  } else if (req.url ~ "(?i)\.(png|gif|jpeg|jpg|ico|swf|css|js)(\?[a-z0-9]+)?$") {
    # Don't allow static files to set cookies.
    # beresp == Back-end response from the web server.
    unset beresp.http.set-cookie;
  }
  else if (beresp.http.Cache-Control) {
    unset beresp.http.Expires;
  }

  if (beresp.status == 301) {
    set beresp.ttl = 1h;
    return(deliver);
  }

  ## Doesn't seem to work as expected
  #if (beresp.status == 500) {
  #  set beresp.saintmode = 10s;
  #  return(restart);
  #}

  # Keep all objects for 1h longer in the cache than their TTL specifies.
  # So even if HTTP objects are expired (they've passed their TTL), we can still use them in case all backends go down.
  # Remember: old content to show is better than no content at all (or an error page).
  set beresp.grace = 1h;
}

sub vcl_deliver {
  # Add 1-year HTTP Strict Transport Security header, to HTTPS responses only.
  # "An HSTS Host MUST NOT include the STS header field in HTTP responses conveyed over non-secure transport."
  # @see http://tools.ietf.org/html/rfc6797#section-7.2
  if (req.http.X-Forwarded-Proto ~ "(?i)https") {
    set resp.http.Strict-Transport-Security = "max-age=31536000";
  }

  # Set a header to track a cache HIT/MISS.
  if (obj.hits > 0) {
    set resp.http.X-Varnish-Cache = "HIT";
  }
  else {
    set resp.http.X-Varnish-Cache = "MISS";
  }

  set resp.http.X-Varnish-Node = "<%= node.name %>";
}

sub vcl_hash {
  hash_data(req.url);
  if (req.http.host) {
    hash_data(req.http.host);
  } else {
    hash_data(server.ip);
  }

  return (hash);
}

# In the event of an error, show friendlier messages.
sub vcl_error {
  if(obj.status == 750) {
    set obj.http.Location = obj.response;
    set obj.status = 302;
    return(deliver);
  }

  if(obj.status == 751) {
    set obj.http.Location = obj.response;
    set obj.status = 301;
    return(deliver);
  }

  # All other error codes get this error page
  set obj.http.Content-Type = "text/html; charset=utf-8";
  set obj.http.Retry-After = "5";
  synthetic {"
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
   <head>
     <title>"} + obj.status + " " + obj.response + {"</title>
   </head>
   <body>
     <h1>Error "} + obj.status + " " + obj.response + {"</h1>
     <p>"} + obj.response + {"</p>
     <h3>Guru Meditation:</h3>
     <p>XID: "} + req.xid + {"</p>
     <hr>
     <p>Varnish cache server</p>
   </body>
</html>
"};
  return (deliver);
}
